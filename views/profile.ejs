<%- include('partials/head', {user: user}); %>

<link rel="stylesheet" href="/shared.css">
<link rel="stylesheet" href="/profile.css">
</head>
  <body>
    <!-- nav -->
    <%- include("partials/nav", {user: user}) %> 
    <!-- main --> 
    <main id="main">

      <section class="container-sm header">
        <%- include("components/profileCard", {profileUser: profileUser, user: user}) %>
      </section>

      <section class="body container-fluid d-flex justify-content-center align-items-center flex-column">
        <% if (user._id.toString() === profileUser._id.toString()) { %>
          <%- include("components/createPost", {user: user}) %>
        <% } %>
        <h3 class="text-uppercase  mb-4 text-center" style="margin: 1rem auto;"><%=profileUser.posts.length === 0? "User hasn't upload any post" : profileUser.name + " Posts" %></h3>
        
        <section id="feed"  class="container" >
          <div class="posts">
            <script>
              let yes = {};
            </script>
            <% profileUser.posts.forEach((post) => { %>
              <%- include("components/post", {post: post, user: user}) %>
            <% }) %>
          </div>
        </section>

      </section>

      <!-- edit profile Modal -->
      <%- include("components/editProfileModal", { user: user }) %>
    
    </main>
    <script src="/shared.js"></script>
    <script>
      document.querySelector(".update-form").addEventListener("submit", async (e) => {
        e.preventDefault();
        const userid = "<%= user._id %>;"
        
        const profileUrl = document.getElementById("profileUrl").value;
        const description = document.getElementById("description").value;
        
      try {
        const response = await fetch("/users/update/" + userid, {
          method: "post",
          credentials: "include",
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({profileUrl, description})
        });
        const data = await response.json();
        
        if(data.ok){
          window.location.reload();
        }

      } catch (error) {
        alert("An Error Occured Please try again");
      }


      });

    </script>
     <script>
      const likeBtnArray = document.querySelectorAll(".like");
      
      likeBtnArray.forEach(btn => {
        btn.addEventListener("click", async (e) => {
          const res = await sendLikeRequest(btn.classList[3]);
          const parent = btn.parentElement.parentElement;
          const div = parent.getElementsByClassName("post-interactions")[0];
  
          if(res.ok){
            if(res.liked){
              yes[btn.classList[3]] = true;
              btn.style.color = "red";
              btn.children[0].classList.remove("far");
              btn.children[0].classList.add("fas");
              btn.children[1].textContent = "Liked"
              div.children[0].textContent = " " + (Number(div.children[0].textContent) + 1);
            }else{
              yes[btn.classList[3]] = false;
              btn.style.color = "black";
              btn.children[0].classList.remove("fas");
              btn.children[0].classList.add("far");
              btn.children[1].textContent = "Like"
              div.children[0].textContent = " " + (Number(div.children[0].textContent) - 1);
            }
          }
        });
      });
  
  
      const sendLikeRequest = async (postId) => {
        const res = await fetch("/users/like", {
          method: yes[postId] ? "delete":"post",
          credentials: "include",
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({postId: postId}),
        });
        const data = await res.json();
        return await data;
      }
  
      const commentForms = document.querySelectorAll(".comment-form");
    
      commentForms.forEach( async (form) => {
        form.addEventListener("submit", async (e) => {
          e.preventDefault();
          const parent = form.parentElement.parentElement;
          const postInput = parent.getElementsByTagName("input")[0];
          const div = parent.parentElement.getElementsByClassName("post-interactions")[0];
          if(postInput.value){
            const data = await commentPost(postInput.classList[1], postInput.value);
            if(data.ok){
              div.children[1].textContent =  " " + (Number(div.children[1].textContent) + 1);
              const comment = createUIComment(data.comment, parent.parentElement.getElementsByClassName("comments")[0].children[1]);
              postInput.value = "";
              comment.scrollIntoView({behavior: "smooth", block: "center", inline: "center"});
            }
          }
        });
      });
  
      const commentPost = async (postId, content) => {
        const res = await fetch("/users/comment", {
          method: "post",
          credentials: "include",
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            postId,
            content,
          }),
        });
        const data = await res.json();
        return data;
      }
  
      const showCommentBtns = document.querySelectorAll(".comment-btn");
  
      const showComments = async (list) => {
        list.forEach(btn => {
          btn.addEventListener("click", async (e) => {
            btn.parentElement.parentElement.getElementsByClassName("comments")[0].classList.toggle("hidden");
            if(btn.parentElement.parentElement.getElementsByClassName("comments")[0].children[1].children.length === 0){
              const data = await fetchComments(btn.classList[0]);
              displayFetchedComments( data.results , btn.parentElement.parentElement.getElementsByClassName("comments")[0].children[1]);
            }
          });
        });
      }
  
      showComments(showCommentBtns);
  
  
      const fetchComments = async (postId) => {
        const res = await fetch(`/post/${postId}/comment`, {
          method: "get",
          credentials: "include",
          headers: {
            'Content-Type': 'application/json'
          },
        });
        const data  = await res.json();
        return data;
      }
  
      const displayFetchedComments = (list, div) => {
        list.forEach(comment => {
          createUIComment(comment, div);
        });
      }
  
      const createUIComment = (comment, div) => {
        let updated = Math.floor((Date.now() - Date.parse(comment.updatedAt)) / 1000 / 60);
        let unit = "minutes";
        
        if(updated > 60){
          updated = Math.floor(updated / 60);
          unit = "hours";
        }

        if(updated > 24 && unit === "hours"){
          updated = Math.floor( updated / 24);
          unit = "days";
        }
        
        const content = document.createElement("div");
        
        if(comment.author._id.toString() === "<%= user._id.toString()%>"){
          content.innerHTML = `<div id='comment${comment._id}' class="shadow-lg  mb-5 bg-body rounded p-1 m-2 comment">
                              <div class="dropdown">
                                  <i class="option fas fa-ellipsis-v" data-bs-toggle="dropdown" aria-expanded="false"></i>
                                  <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                                    <li data-bs-toggle="modal" data-bs-target="#editCommentModal${comment._id}"><a class="dropdown-item pointer"><i class="far fa-edit"></i> Edit</a></li>
                                    <li data-bs-toggle="modal" data-bs-target="#deleteCommentModal${comment._id}"><a class="dropdown-item pointer"><i class="far fa-trash-alt"></i> Delete</a></li>
                                  </ul>
                                </div>
                                <div class="row p-0 m-0">
                                  <div class="m-0 p-0">
                                    <a href="profile/${comment.author._id}" class="d-flex justify-content-start align-items-center">
                                      <img style="max-width: 40px;" src="${comment.author.profileUrl}" class="img-fluid img-thumbnail post-img m-1 " alt="Users profile">
                                      <p class="card-title m-1 ">${comment.author.name}</p>
                                    </a> 
                                  </div>
                                  <div class="m-1 p-0">
                                    <div class="card-body m-0 p-0">
                                      <p class="card-text">${comment.content}</p>
                                      <p class="card-text"><small class="text-muted">Last updated ${updated} ${unit} ago</small></p>
                                    </div>
                                  </div>
                                </div>
                            </div>
                            
                            <!-- delete modal popup -->
                            <div class="modal" tabindex="-1" id="deleteCommentModal${comment._id}">
                              <div class="modal-dialog">
                                <div class="modal-content">
                                  <div class="modal-header">
                                    <h5 class="modal-title">Delete Comment</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                  </div>
                                  <div class="modal-body">
                                    <p>Are you sure you want to delete this comment? </p>
                                  </div>
                                  <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <button onclick="deleteComment(this.classList[3])" type="button" class="btn btn-danger delete-post  ${comment._id} %>" data-bs-dismiss="modal">Delete</button>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <!-- delete modal popup -->
                            <div class="modal" tabindex="-1" id="editCommentModal${comment._id}">
    
                            <div class="modal-dialog">
                              <div class="modal-content">
                                <div class="modal-header">
                                  <h5 class="modal-title">Edit Comment</h5>
                                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                  <form class="update-comment" onsubmit="if(event.target.content.value === ''){alert('Comment cant be empty'); return;}else{ updateComment('${comment._id}', event.target.content.value);}">
                                      <div class="modal-body">
                                        <div>
                                          <label class="form-label" for="content">Content</label>
                                          <textarea name="content" style="height: auto; text-align: justify;" class="form-control" rows="15">${comment.content}</textarea>
                                        </div>
                                      </div>
                                      <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        <button type="submit" class="btn btn-primary">Save changes</button>
                                      </div>
                                </form>
                              </div>
                            </div>
                          </div>
  `;
        }
        else{
          content.innerHTML = `<div id='comment${comment._id}' class="shadow-lg  mb-5 bg-body rounded p-1 m-2 comment">              
                                  <div class="row p-0 m-0">
                                    <div class="m-0 p-0">
                                      <a href="profile/${comment.author._id}" class="d-flex justify-content-start align-items-center">
                                        <img style="max-width: 40px;" src="${comment.author.profileUrl}" class="img-fluid img-thumbnail post-img m-1 " alt="Users profile">
                                        <p class="card-title m-1 ">${comment.author.name}</p>
                                      </a> 
                                    </div>
                                    <div class="m-1 p-0">
                                      <div class="card-body m-0 p-0">
                                        <p class="card-text">${comment.content}</p>
                                        <p class="card-text"><small class="text-muted">Last updated ${updated} ${unit} ago</small></p>
                                      </div>
                                    </div>
                                  </div>
                              </div>`;
        }


        
        div.appendChild(content);
        return content;
      } 


      const updatePostForms = document.querySelectorAll(".update-post");

      updatePostForms.forEach( (form) => {
        form.addEventListener("submit", async (e) => {
          e.preventDefault();
          const postId = form.classList[1];
          const content = e.target.content.value;

          const response = await updatePost(postId, content);

          if(response.ok){
            window.location.reload();
          }
        });
      });

    </script>
    <%- include('partials/footer'); %>