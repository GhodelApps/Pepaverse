<%- include("partials/head", {user: user}) %> 
<link rel="stylesheet" href="/partials-css/nav.css">
<link rel="stylesheet" href="/home.css">
</head>
<body>
  <%-  include('partials/nav', {user: user}); %>
  <main id="main" class="container-sm p-4 d-sm-flex flex-sm-column justify-content-sm-center align-items-sm-center align-content-sm-center">
    <h2 class="text-uppercase  mb-4" style="margin: 1rem auto;">Home Page</h2>

    <!-- create-post -->
    <div class="create-posts shadow p-3 mb-5 bg-body rounded">
      <div class="card mb-1 shadow p-3 mb-5 bg-body rounded" style="max-width: 530px;">
        <div class="row g-0 ">
          <div style="margin-top: 3%;"  class=" col-sm-2  text-center">
            <div style="display: flex;  align-items: center;">
              <a href="/profile/<%= user._id %> ">
                <img class = "create-post-img img-thumbnail" src = " <%= user.profileUrl %> " class="img-fluid rounded-start" alt="Users profile">
              </a>
              <a class="create-post-name" href=" /profile/<%= user._id %> "> <h5 class="card-title"><%= user.name %></h5> </a>
            </div>
          </div>
          <div class="col-md-0">
            <div class="card-body">
              <form  action="/users/post" method="post">
                <div class="form-floating mb-1">
                  <input required type="text" class="form-control" name="postTextContent">
                  <label for="postTextContent">What is in your mind <%= user.name %> ?</label>
                </div>
                <input style="float: right; margin: 0.4rem auto;" class="me-md-2 btn btn-primary" type="submit" value="Upload">
              </form>
          </div>
        </div>
      </div>
    </div>
    <h3 class="text-uppercase  mb-4" style="margin: 1rem auto;">Feed</h3>
    <section id="feed"  class="container" >
      <div class="posts">
        <script>
          let yes = {};
        </script>
        <% posts.forEach((post) => { %>
          <div class="card mb-3 shadow p-2 mb-5 bg-body rounded" style="max-width: 530px;">
            <div class="row g-0 p-0">
                <div class="col-md-3 text-center p-0">
                  <a href="/profile/<%= post.author._id %> ">
                    <img class="post-img img-thumbnail" src="<%= post.author.profileUrl %> " alt="Users profile">
                  </a>
                </div>
              <div class="col-md-8">
                <div class="card-body">
                  <a class="post-name" href="/profile/<%= post.author._id %> "><h5 class="card-title"><%= post.author.name %> </h5></a>
                  <p class="card-text"><%= post.content %> </p>
                </div>
                <div class="d-flex post-interactions">
                  <i style="color: red;" class="fas fa-heart m-2 p-1">  <%= post.likes.length%></i>
                  <i class="far fa-comment m-2 p-1">  <%= post.comments.length %></i>
                </div>
                <div class="d-flex">
                  <% if (user.likedPosts.includes(post._id)) { %>
                    <script>
                      yes["<%= post._id %>"] = true;
                    </script>
                    <p style="color: red;"  class="m-2 p-1 like <%= post._id %>"><i class="fas fa-heart "></i> <span>Liked</span></p>
                  <% }else {%>
                    <p style="color: black;"  class="m-2 p-1 like <%= post._id %>"><i class="far fa-heart "></i> <span>Like</span></p>
                    <%}%>
                  <p class="<%= post._id%> m-2 p-1 comment-btn"><i class="far fa-comment "></i> <span>Comment</span></p>
                  <p class="m-2 p-2 share"><i class="far fa-share-square"></i> <span>Share</span></p>
                </div>
                <p class="card-text m-2"><small class="text-muted"><%= post.createdAt.toDateString() %> </small></p>
                <!-- comments -->
                
                <div class="comments hidden">
                  <div class="p-2 m-2 shadow-lg  mb-5 bg-body rounded">
                    <form class="comment-form">
                      <label for="comment">Add a comment</label>
                      <input class="form-control <%= post._id %> comment-field" type="text" id="comment" name="comment">
                      <button type="submit" class="comment-post btn btn-primary">Post</button>
                    </form>
                  </div>
                  <div>
                  </div>
                  </div>
              </div>
            </div>
          </div>
        <% }) %>
      </div>
    </section>
  </main> 
  <!-- Button trigger modal -->
<button style="visibility: hidden; display: none;"  id="click-modal" type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
  Launch demo modal
</button>
  <script>
    const likeBtnArray = document.querySelectorAll(".like");
    
    likeBtnArray.forEach(btn => {
      btn.addEventListener("click", async (e) => {
        const res = await sendLikeRequest(btn.classList[3]);
        const parent = btn.parentElement.parentElement;
        const div = parent.getElementsByClassName("post-interactions")[0];

        if(res.ok){
          if(res.liked){
            yes[btn.classList[3]] = true;
            btn.style.color = "red";
            btn.children[0].classList.remove("far");
            btn.children[0].classList.add("fas");
            btn.children[1].textContent = "Liked"
            div.children[0].textContent = " " + (Number(div.children[0].textContent) + 1);
          }else{
            yes[btn.classList[3]] = false;
            btn.style.color = "black";
            btn.children[0].classList.remove("fas");
            btn.children[0].classList.add("far");
            btn.children[1].textContent = "Like"
            div.children[0].textContent = " " + (Number(div.children[0].textContent) - 1);
          }
        }
      });
    });


    const sendLikeRequest = async (postId) => {
      const res = await fetch("/users/like", {
        method: yes[postId] ? "delete":"post",
        credentials: "include",
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({postId: postId}),
      });
      const data = await res.json();
      return await data;
    }

    const commentForms = document.querySelectorAll(".comment-form");
    
    commentForms.forEach( async (form) => {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();
        const parent = form.parentElement.parentElement;
        const postInput = parent.getElementsByTagName("input")[0];
        const div = parent.parentElement.getElementsByClassName("post-interactions")[0];
        if(postInput.value){
          const data = await commentPost(postInput.classList[1], postInput.value);
          if(data.ok){
            div.children[1].textContent =  " " + (Number(div.children[1].textContent) + 1);
            const comment = createUIComment(data.comment, parent.parentElement.getElementsByClassName("comments")[0].children[1]);
            postInput.value = "";
            comment.scrollIntoView({behavior: "smooth", block: "center", inline: "center"});
          }
        }
      });
    });


    const commentPost = async (postId, content) => {
      const res = await fetch("/users/comment", {
        method: "post",
        credentials: "include",
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          postId,
          content,
        }),
      });
      const data = await res.json();
      return data;
    }

    const showCommentBtns = document.querySelectorAll(".comment-btn");

    const showComments = async (list) => {
      list.forEach(btn => {
        btn.addEventListener("click", async (e) => {
          btn.parentElement.parentElement.getElementsByClassName("comments")[0].classList.toggle("hidden");
          if(btn.parentElement.parentElement.getElementsByClassName("comments")[0].children[1].children.length === 0){
            const data = await fetchComments(btn.classList[0]);
            displayFetchedComments( data.results , btn.parentElement.parentElement.getElementsByClassName("comments")[0].children[1]);
          }
        });
      });
    }

    showComments(showCommentBtns);


    const fetchComments = async (postId) => {
      const res = await fetch(`/post/${postId}/comment`, {
        method: "get",
        credentials: "include",
        headers: {
          'Content-Type': 'application/json'
        },
      });
      const data  = await res.json();
      return data;
    }

    const displayFetchedComments = (list, div) => {
      list.forEach(comment => {
        createUIComment(comment, div);
      });
    }

    const createUIComment = (comment, div) => {
      const content = document.createElement("div");
        content.innerHTML = `<div class="shadow-lg  mb-5 bg-body rounded p-1 m-2 comment">
                            <div class="row p-0 m-0">
                              <div class="m-0 p-0">
                               <a href="profile/${comment.author._id}" class="d-flex justify-content-start align-items-center">
                                 <img style="max-width: 40px;" src="${comment.author.profileUrl}" class="img-fluid img-thumbnail post-img m-1 " alt="Users profile">
                                 <p class="card-title m-1 ">${comment.author.name}</p>
                               </a> 
                              </div>
                              <div class="m-1 p-0">
                                <div class="card-body m-0 p-0">
                                  <p class="card-text">${comment.content}</p>
                                  <p class="card-text"><small class="text-muted">Last updated ${Math.floor((Date.now() - Date.parse(comment.updatedAt)) / 1000 / 60)}mins ago</small></p>
                                </div>
                              </div>
                            </div>
                          </div>`;

        
        div.appendChild(content);
        return content;
    } 
  </script>
  <script>
    const hasAvatar = "<%= user.profileUrl %>";

    window.addEventListener('load', async (e) => {
      await loadModal(hasAvatar);
    });

    const requestAvatar = async () => {
      try {
        const response = await fetch("https://randomuser.me/api/?inc=email");
        const data = await response.json();

        const id = data.info.seed;
        const url = `https://gravatar.com/avatar/${id}?s=400&d=robohash&r=x`;
        await displayAvatar(url);
      } catch (error) {
        alert("An Error Occured Please try again");
      }
    }

    const displayAvatar = (url) => {
      document.getElementById("avatar-img").src = url;
    }

    const loadModal = async  (hasAvatar) => {
      if(!hasAvatar){
        const div = document.createElement("div");
        div.innerHTML = `
              <div class="modal fade" data-bs-backdrop="static"  data-bs-keyboard="false" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h6 class=" text-uppercase  mb-4 text-muted modal-title">Select Avatar</h6>
                    </div>
                    <div class="model-body d-flex flex-column justify-content-center align-content-center">
                        <img id="avatar-img" class="img-thumbnail" style="border-radius: 50%; border: 1px solid #111; max-width: 50%; margin: 0 auto;" src="" alt="Avatar">
                        <div class="d-flex justify-content-center align-content-center">
                          <button id="refresh-avatar" class="m-2 btn btn-secondary">Random</button>
                          <button id="save-avatar" class="m-2 btn btn-success">Select</button>
                        </div>  
                    </div>
                  </div>
                </div>
              </div>`
              document.getElementsByTagName("body")[0].appendChild(div);

              document.getElementById("click-modal").click(); 
              
              await requestAvatar();

              const refreshAvatar =  document.getElementById("refresh-avatar");
              refreshAvatar && refreshAvatar.addEventListener("click", async (e) => {
                await requestAvatar();
              });

              const saveAvatarBtn = document.getElementById("save-avatar");
              saveAvatarBtn && saveAvatarBtn.addEventListener("click", async (e) => {
                await saveAvatar(document.getElementById("avatar-img").src);
              });
      }
    }

    const saveAvatar = async (url) => {
      const userid = "<%= user._id %>;"
      try {
        const response = await fetch("/users/update/" + userid, {
          method: "post",
          credentials: "include",
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({profileUrl: url})
        });
        const data = await response.json();
        console.log(data);

        if(data.ok){
          window.location.href = "/";
        }
      } catch (error) {
        alert("An Error Occured Please try again");
      }

    }

  </script>
  <%- include("partials/footer") %>